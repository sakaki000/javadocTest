name: Javadoc Genarate
on: workflow_dispatch
#  pull_request:
#    branches: [ main ]
#    types: [ closed ]

jobs:
  javadoc_generate:
    runs-on: ubuntu-latest

    env:
      # javadoc用ブランチ名
      BRANCH_JAVADOC: javadocOnly
      BRANCH_JAVADOC_ORIGIN: origin/javadocOnly
      # masterブランチ名
      BRANCH_MASTER: main
      BRANCH_MASTER_ORIGIN: origin/main

    steps:
      # masterブランチをチェックアウト
      - uses: actions/checkout@v2
        with:
          ref: ${{env.BRANCH_MASTER}}

      # javadoc専用ブランチの存在確認
      - name: Check javadoc branch exist
        id: check
        run: |
          git fetch
          echo "##[set-output name=branch;]$(git branch -a --format="%(refname:short)" | grep -e ${{env.BRANCH_JAVADOC}})"
      # git configの設定
      - uses: fregante/setup-git-user@v1

      # javadoc専用ブランチがなければmasterブランチのソースをもとに作成
      - name: Create branch
        if: steps.check.outputs.branch != env.BRANCH_JAVADOC_ORIGIN
        run: |
          # javadoc専用ブランチを作成
          git checkout -b ${{env.BRANCH_JAVADOC}} ${{env.BRANCH_MASTER}}
          git push origin ${{env.BRANCH_JAVADOC}}
      # javadoc専用ブランチがあればmasterブランチのソースに更新
      - name: Merge branch
        if: steps.check.outputs.branch == env.BRANCH_JAVADOC_ORIGIN
        run: |
          # javadoc専用ブランチをチェックアウト
          git checkout ${{env.BRANCH_JAVADOC}}
          # mergeコマンドでmasterの内容を取り込む(masterの変更優先)
          git merge --allow-unrelated-histories -Xtheirs ${{env.BRANCH_MASTER_ORIGIN}}
          # masterブランチのソースをjavadoc専用ブランチにpush
          git push origin ${{env.BRANCH_JAVADOC}}
      # JDKの設定
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      # Gradleへの権限付与
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Javadoc生成
      - name: Build javadoc
        run: |
          ! ./gradlew javadoc 2>&1 | grep -v 'warning: \\[deprecation\\]' | grep -A 2 -e warning: -e error: ; exit $?
          cd build/docs/javadoc/
          
      # docsフォルダの内容入れ替え
      - name: Update javadoc
        run: |
          # docsフォルダ作成
          mkdir -p ./docs
          
          COUNT=$(diff -r -q  build/docs/javadoc/ ./docs/ | wc -l)
          # 変更が1件以上あればdocsフォルダの中身を入れ替える
          if [ $COUNT -gt 0 ]; then
            rm -rf ./docs/*
            cp -r first/build/docs/javadoc/* ./docs/
            git add ./docs/*
            git commit -m "update javadoc"
          fi
          git push origin ${{env.BRANCH_JAVADOC}}
