name: plusActionTest
on: workflow_dispatch

jobs:
   create_javadoc:
      runs-on: ubuntu-latest
      
      env:
        BRANCH_JAVADOC: javadocOnly
        BRANCH_JAVADOC_ORIGIN: origin/javadocOnly        
        BRANCH_MASTER: main
        BRANCH_MASTER_ORIGIN: origin/main
        
      steps:
      # mainブランチをチェックアウト
      - uses: actions/checkout@v2
        with:
          ref: 'main'
          
      # javadoc専用ブランチの存在確認
      - name: check javadoc branch exist
        id: check
        run: |
          git fetch
          echo "##[set-output name=branch;]$(git branch -a --format="%(refname:short)" | grep -e ${{env.BRANCH_JAVADOC}})"

      # git configの設定
      - uses: fregante/setup-git-user@v1

      # javadoc専用ブランチがなければmasterのソースをもとに作成
      - name: Create branch
        if: steps.check.outputs.branch != env.BRANCH_JAVADOC_ORIGIN
        run: |
          # javadoc専用ブランチを作成
          git checkout -b ${{env.BRANCH_JAVADOC}} ${{env.BRANCH_MASTER}}
          # mainブランチのソースをjavadoc専用ブランチにpush
          git push origin ${{env.BRANCH_JAVADOC}}
          # docsフォルダ作成
          mkdir -p ./docs
          # 空フォルダだと変更認識してくれないため、docs配下に空ファイルを作成
          touch ./docs/readme.txt
          git add .
          git commit -m "create docs directory"
          git push origin ${{env.BRANCH_JAVADOC}}
      
      # javadoc専用ブランチがあればmasterのソースに更新
      - name: Merge branch
        if: steps.check.outputs.branch == env.BRANCH_JAVADOC_ORIGIN
        run: |
          #javadoc専用ブランチをチェックアウト
          git checkout ${{env.BRANCH_JAVADOC}}
          # mergeコマンドでmasterの内容を取り込む(masterの変更優先)
          git merge --allow-unrelated-histories -Xtheirs ${{env.BRANCH_MASTER_ORIGIN}}
          # mainブランチのソースをjavadoc専用ブランチにpush
          git push origin ${{env.BRANCH_JAVADOC}}
          
      # JDKの設定
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
          
      # Gradleへの権限付与
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        
      # Javadoc生成
      - name: Build Javadocs
        run: |
         ! ./gradlew javadoc 2>&1 | grep -v 'warning: \\[deprecation\\]' | grep -A 2 -e warning: -e error: ; exit $?
         cd build/docs/javadoc/
         
      # docsフォルダの内容入れ替え
      - name: Update javadoc
        run: |
          if diff -r build/docs/javadoc/ ./docs/
          then
            rm -rf ./docs/*
            cp -r build/docs/javadoc/* ./docs/
            git add ./docs/*
            git commit -m "update javadoc"
            git push origin ${{env.BRANCH_JAVADOC}}
          fi
